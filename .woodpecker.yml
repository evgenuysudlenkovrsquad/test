# .woodpecker.yml
steps:
#############################################################################
# 1. Матрица Kaniko — параллельно билдим indexer и relayer
#############################################################################
  - name: build
    image: woodpeckerci/plugin-kaniko:latest

    when:
      event: push
      branch: [develop, sandbox, main]

    matrix:
      APP: [indexer, relayer]

    environment:
      DOCKER_REGISTRY_URL:
        from_secret: docker_registry_url
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    settings:
      registry: ${DOCKER_REGISTRY_URL}
      username: ${DOCKER_USERNAME}
      password: ${DOCKER_PASSWORD}
      repo: ${DOCKER_REGISTRY_URL}/${APP}-${CI_COMMIT_BRANCH}
      tags: latest,${CI_PIPELINE_NUMBER}
      dockerfile: ${APP}/Dockerfile
      context: .
      cache: true

# #############################################################################
# # 2. Деплой всех собранных образов
# #############################################################################
#   - name: deploy
#     image: alpine/k8s:1.30.1
#     depends_on: [build]

#     when:
#       event: push
#       branch: [develop, sandbox, main]

#     environment:
#       KUBE_CONFIG:
#         from_secret: kube_config
#       DOCKER_REGISTRY_URL:
#         from_secret: docker_registry_url
#       APPS: indexer relayer

#     commands:
#       - set -euo pipefail
#       - apk add --no-cache bash curl helm

#       # выбираем namespace по ветке
#       - |
#         case "$CI_COMMIT_BRANCH" in
#           develop) APP_NS=ton-teleport-dev  ;;
#           sandbox) APP_NS=ton-teleport-sand ;;
#           main)    APP_NS=ton-teleport-prod ;;
#           *) echo "Unsupported branch $CI_COMMIT_BRANCH"; exit 1 ;;
#         esac
#         echo "Deploy to $APP_NS (tag=$CI_PIPELINE_NUMBER)"

#       # kube-context
#       - echo "$KUBE_CONFIG" > kubeconfig.yaml
#       - export KUBECONFIG=$PWD/kubeconfig.yaml
#       - kubectl config use-context "$(kubectl config get-contexts -o name | head -n1)"

#       # деплой циклом
#       - |
#         failed=0
#         for APP in $APPS; do
#           SECRET_OPT=""
#           kubectl -n "$APP_NS" get secret "${APP}-secrets" &>/dev/null \
#             && SECRET_OPT="--set secretName=${APP}-secrets"

#           VAL_OPT=""
#           [ -f "${APP}/${APP}-${CI_COMMIT_BRANCH}.yml" ] \
#             && VAL_OPT="-f ${APP}/${APP}-${CI_COMMIT_BRANCH}.yml"

#           helm upgrade --install "$APP" ./helm \
#             --namespace "$APP_NS" \
#             --set image.repository="$DOCKER_REGISTRY_URL/${APP}-${CI_COMMIT_BRANCH}" \
#             --set image.tag="$CI_PIPELINE_NUMBER" \
#             --set app.name="$APP" \
#             --set configMapName=envs-config \
#             $SECRET_OPT $VAL_OPT \
#             --atomic --timeout 5m --history-max 2 || failed=1
#         done
#         [ $failed -eq 0 ] || exit 1
